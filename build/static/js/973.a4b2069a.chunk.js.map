{"version":3,"file":"static/js/973.a4b2069a.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/errorBoundary/ErrorBoundary.jsx","components/pages/MainPage.jsx"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport PropTypes from 'prop-types';\n\nconst CharList = (props) => {\n\n    const [charList, setCharlist] = useState([]),\n          [newItemLoading, setNewItemLoading] = useState(false),\n          [offset, setOffset] = useState(210),\n          [charEnded, setCharEnded] = useState(false),\n          [activeChar, setActiveChar] = useState(sessionStorage.getItem('activeItem'));\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded =  (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        setCharlist(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const setActiveItemSessionStorage = (id) => {\n        const activeItem = charList.filter(item => item.id == id)\n        const setStorage = sessionStorage.setItem('activeItem', activeItem[0].id);\n    }\n\n\n    function renderItems (arr)  {\n        \n        const items =  arr.map((item) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <li \n                    onFocus={() => {\n                        setActiveItemSessionStorage(item.id);\n                        setActiveChar(item.id);\n                        props.onCharSelected(item.id);\n                    }}\n                    className={activeChar == item.id ? 'char__item char__item_selected' : 'char__item' }\n                    key={item.id}\n                    tabIndex={0}        >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n               \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button className=\"button button__main button__long\"\n                        disabled={newItemLoading}\n                        style={{'display': charEnded ? 'none' : 'block'}}\n                        onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n   }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"name\" style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n            </div>\n            <div className=\"char__descr\">\n            {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null: 'There is no comics with this character'}\n            {\n                comics.map((item, i) => {\n                    const id = +item.resourceURI.substr(43);\n                    if (i > 9) return;\n                    return (\n                        <Link to={`/comics/${id}`} key={id} className=\"char__comics-item\">\n                            {item.name}\n                        </Link>\n                    )\n                })\n            }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n    \r\n        return this.props.children;\r\n}\r\n}\r\n\r\nexport default ErrorBoundary;","import RandomChar from \"../randomChar/RandomChar\"\r\nimport CharList from \"../charList/CharList\"\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useState } from \"react\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(+sessionStorage.getItem('activeItem'));\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                <CharInfo charId={selectedChar}/>\r\n            </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage;"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharlist","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","_useState9","sessionStorage","getItem","_useState10","activeChar","setActiveChar","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","setActiveItemSessionStorage","activeItem","filter","item","setItem","items","arr","map","onFocus","onCharSelected","tabIndex","renderItems","disabled","_Fragment","comics","i","resourceURI","substr","Link","to","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","key","value","info","console","log","this","setState","Component","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}