{"version":3,"file":"static/js/132.1a626330.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/errorBoundary/ErrorBoundary.jsx","components/charSearchForm/CharSearchForm.jsx","components/pages/MainPage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport PropTypes from 'prop-types';\n\nconst CharList = (props) => {\n\n    const [charList, setCharlist] = useState([]),\n          [newItemLoading, setNewItemLoading] = useState(false),\n          [offset, setOffset] = useState(210),\n          [charEnded, setCharEnded] = useState(false),\n          [activeChar, setActiveChar] = useState(sessionStorage.getItem('activeItem'));\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded =  (newCharList) => {\n\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        setCharlist(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const setActiveItemSessionStorage = (id) => {\n        const activeItem = charList.filter(item => item.id == id)\n        sessionStorage.setItem('activeItem', activeItem[0].id);\n    }\n\n\n    function renderItems (arr)  {\n        \n        const items =  arr.map((item) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        onFocus={() => {\n                            setActiveItemSessionStorage(item.id);\n                            setActiveChar(item.id);\n                            props.onCharSelected(item.id);\n                        }}\n                        className={activeChar == item.id ? 'char__item char__item_selected' : 'char__item' }\n                        key={item.id}\n                        tabIndex={0}        >\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n               \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n                <button className=\"button button__main button__long\"\n                        disabled={newItemLoading}\n                        style={{'display': charEnded ? 'none' : 'block'}}\n                        onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n   }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"name\" style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n            </div>\n            <div className=\"char__descr\">\n            {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null: 'There is no comics with this character'}\n            {\n                comics.map((item, i) => {\n                    const id = +item.resourceURI.substr(43);\n                    if (i > 9) return;\n                    return (\n                        <Link to={`/comics/${id}`} key={id} className=\"char__comics-item\">\n                            {item.name}\n                        </Link>\n                    )\n                })\n            }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n    \r\n        return this.props.children;\r\n}\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import RandomChar from \"../randomChar/RandomChar\"\r\nimport CharList from \"../charList/CharList\"\r\nimport CharInfo from \"../charInfo/CharInfo\"\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(+sessionStorage.getItem('activeItem'));\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal portal\"\r\n                />\r\n            <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n               </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c13ea49a6b89675e3d515c4e9ae31950';\r\n    //const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage:char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharlist","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","_useState9","sessionStorage","getItem","_useState10","activeChar","setActiveChar","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","setActiveItemSessionStorage","activeItem","filter","item","setItem","items","arr","map","CSSTransition","timeout","classNames","onFocus","onCharSelected","tabIndex","TransitionGroup","component","renderItems","disabled","_Fragment","comics","i","resourceURI","substr","Link","to","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","key","value","info","console","log","this","setState","Component","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_x2","_ref3","_callee3","_context3","_x3","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x4","_comics$textObjects$","title","pageCount","path","extension","language","textObjects","price","prices","slice","urls"],"sourceRoot":""}